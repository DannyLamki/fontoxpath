id-rename-expr-06,The target expression is allowed to be updating in version 3.0
=====================TESTS ABOVE HAVE BEEN MARKED MANUALLY=====================
variable-declaration-01,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", ";", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
variable-declaration-02,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", ";", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-function-declaration-01,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.
id-function-declaration-02,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or "}" but "n" found.' to equal 'XUST0001'
id-function-declaration-03,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.
id-function-declaration-04,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'FOER0000'
id-function-declaration-05,Error: Should throw error XUST0002.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0002'
id-function-declaration-06,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.
id-function-declaration-07,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or "}" but "n" found.' to equal 'XUST0001'
id-function-declaration-08,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.
id-function-declaration-09,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-function-declaration-09 :)\n(: Description: Evaluation of a replace expression used with function declaration. :)\n(: Function is declared not "updating" an not external and enclosed expression :)\n(: is an updating expression.  :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n\ndeclare function \n   local:replaceFunction($e as element()) \n   {\n   let $e1 := $e    \n   return\n     replace value of node $e1/employee[1]/salary[1] with $e1/employee[2]/salary[1]\n   };\n   \nlet $arg1 := $input-context/employees[1]\nreturn\n  local:replaceFunction($arg1) is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-function-declaration-010,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.
id-function-declaration-011,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-function-declaration-011 :)\n(: Description: Evaluation of a rename expression used with function declaration. :)\n(: Function is declared not "updating" an not external and enclosed expression :)\n(: is an updating expression.  :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n\ndeclare function \n   local:renameFunction($e as element()) \n   {\n   let $e1 := $e    \n   return\n     rename node $e1/salary[1] as "salary-1"\n   };\n   \nlet $arg1 := $input-context/employees[1]/employee[3]\nreturn\n  local:renameFunction($arg1) is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-function-declaration-012,Error: Should throw error XUST0002.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0002'
id-function-declaration-013,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-013 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: Function is declared not "updating" an not external and enclosed expression :) (: is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare function     local:transformFunction($e as element())     {      copy $newVar := $e modify delete node $newVar/employee[4] return $newVar    };     let $arg1 := $input-context/employees[1] return   local:transformFunction($arg1)". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or "}" but "$" found. (: Name: id-function-declaration-013 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: Function is declared not "updating" an not external and enclosed expression :) (: is an updating expression.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare function     local:transformFunction($e as element())     {      copy [Error is around here]$newVar := $e modify delete node $newVar/employee[4] return $newVar    };     let $arg1 := $input-context/employees[1] return   local:transformFunction($arg1)
id-function-declaration-014,Error: Should throw error XUST0028.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0028' or Should throw error XUST0002.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0002'
id-function-declaration-015,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0001'
id-function-declaration-016,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0001'
id-function-declaration-017,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-declaration-017 :) (: Description: Recursive updating function. :)   declare updating function local:increase($e as element(b)?, $amount as xs:integer)     {      if ($e) then (         replace value of node $e with ($e + $amount),         local:increase($e/../b[.>>$e][1], $amount+1)         (: i.e. $e/following-sibling::b[1], but we're not allowed to use the following-sibling axis: see bug 8251 :)      ) else ()    };     let $a1 :=    <a>{for $i in 1 to 100 return <b>{$i}</b>}</a> let $a2 :=     copy $a3 := $a1    modify local:increase($a3/b[1], 1)    return $a3 return <totals>{sum($a1/b/xs:integer(.)), sum($a2/b/xs:integer(.))}</totals>". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: id-function-declaration-017 :) (: Description: Recursive updating function. :)   declare [Error is around here]updating function local:increase($e as element(b)?, $amount as xs:integer)     {      if ($e) then (         replace value of node $e with ($e + $amount),         local:increase($e/../b[.>>$e][1], $amount+1)         (: i.e. $e/following-sibling::b[1], but we're not allowed to use the following-sibling axis: see bug 8251 :)      ) else ()    };     let $a1 :=    <a>{for $i in 1 to 100 return <b>{$i}</b>}</a> let $a2 :=     copy $a3 := $a1    modify local:increase($a3/b[1], 1)    return $a3 return <totals>{sum($a1/b/xs:integer(.)), sum($a2/b/xs:integer(.))}</totals>
function-declaration-01,Error: Should throw error XUST0001.: expected 'The expression (: Name: function-declaration-01 :)\n(: Description: Function declaration, non-updating, with updating expression. :)\n\n(: insert-start :)\ndeclare variable $employees external;\n(: insert-end :)\n\ndeclare function local:test ($emp)\n   { replace value of node $emp/salary with 200000 };\n\nlocal:test($employees/employees/*[1])\n is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
function-declaration-02,Error: Should throw error XUST0028.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0028'
function-declaration-03,Error: Should throw error XUST0002.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found.' to equal 'XUST0002'
function-declaration-04,Error: XPST0003: Unable to parse XPath: "(: Name: function-declaration-04 :) (: Description: Function declaration, updating, with vacuous expression. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare updating function local:test ($emp)    { () };  local:test($employees/employees/*[1]) ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Name: function-declaration-04 :) (: Description: Function declaration, updating, with vacuous expression. :)  (: insert-start :) declare variable $employees external; (: insert-end :)  declare [Error is around here]updating function local:test ($emp)    { () };  local:test($employees/employees/*[1])
id-insert-expr-01,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-02,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-03,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-04,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-05,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-06,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-07,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-08,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-09,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-010,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-011,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-012,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-013,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-014,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-015,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-016,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-017,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-018,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-019,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-020,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-021,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-022,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-023,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001'
id-insert-expr-024,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001'
id-insert-expr-025,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001'
id-insert-expr-026,Error: Should throw error XUTY0004.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0004'
id-insert-expr-027,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
id-insert-expr-028,Error: Should throw error XUDY0027.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0027'
id-insert-expr-029,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
id-insert-expr-030,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-031,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-032,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-033,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-034,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-035,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-036,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-037,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-038,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-039,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-040,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-041,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-042,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-043,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-044,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-045,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
id-insert-expr-046,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
id-insert-expr-047,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-048,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-049,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-050,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-051,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-052,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-053,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-054,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
id-insert-expr-055,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
id-insert-expr-056,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
id-insert-expr-057,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
id-insert-expr-058,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
id-insert-expr-059,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
id-insert-expr-060,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
id-insert-expr-061,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
id-insert-expr-062,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029'
id-insert-expr-063,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029'
id-insert-expr-064,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005' or Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
id-insert-expr-065,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005' or Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
id-insert-expr-066,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005' or Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
id-insert-expr-067,Error: Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
id-insert-expr-068,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005' or Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
id-insert-expr-069,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-070,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-071,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-072,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-073,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-074,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-075,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-076,Error: Should throw error XUDY0029.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0029' or Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-077,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-078,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-079,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-insert-expr-080,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-081,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-081 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-081 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])
id-insert-expr-082,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-082 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> as first into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-082 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> as first into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])
id-insert-expr-083,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-083 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> as last into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-083 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> as last into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])
id-insert-expr-084,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-084 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> before $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/dependents[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-084 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> before $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/dependents[1])
id-insert-expr-085,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-085 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> after $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/dependents[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-085 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> after $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/dependents[1])
id-insert-expr-086,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-086 :) (: Description: Check namepsace propogation when inserting an attribute. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node attribute hisco:salaried {"true"} into $e    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-086 :) (: Description: Check namepsace propogation when inserting an attribute. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node attribute hisco:salaried {"true"} into $e    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-insert-expr-081-no-inherit,Error: XPST0003: Unable to parse XPath: " (: Name: id-insert-expr-081 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco", $newemps/myco:employee[1]/dependents[1])  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found.  (: Name: id-insert-expr-081 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco", $newemps/myco:employee[1]/dependents[1])
id-insert-expr-082-no-inherit,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-082 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> as first into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-082 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> as first into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])
id-insert-expr-083-no-inherit,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-083 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> as last into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-083 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> as last into $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco",                              $newemps/myco:employee[1]/dependents[1])
id-insert-expr-084-no-inherit,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-084 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> before $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco", $newemps/dependents[1])". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-084 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> before $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco", $newemps/dependents[1])
id-insert-expr-085-no-inherit,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-085 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node <dependents/> after $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco", $newemps/dependents[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-085 :) (: Description: Check namepsace propogation when inserting an element. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node <dependents/> after $e/myco:employee[1]    return $e return     namespace-uri-for-prefix("myco", $newemps/dependents[1])
id-insert-expr-086-no-inherit,Error: XPST0003: Unable to parse XPath: "(: Name: id-insert-expr-086 :) (: Description: Check namepsace propogation when inserting an attribute. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify insert node attribute hisco:salaried {"true"} into $e    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-insert-expr-086 :) (: Description: Check namepsace propogation when inserting an attribute. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees>                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify insert node attribute hisco:salaried {"true"} into $e    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-insert-expr-087,Error: Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-088,Error: Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-089,Error: Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-090,Error: Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-091,Error: Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-092,Error: Should throw error XUDY0030.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0030'
id-insert-expr-093,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-insert-expr-094,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-01,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-02,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-03,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-04,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-05,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-06,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001'
id-delete-expr-07,Error: Should throw error XUTY0007.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0007'
id-delete-expr-08,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-09,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-010,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-011,Error: Should throw error XUTY0007.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0007'
id-delete-expr-012,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-013,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-014,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-015,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-016,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-017,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-018,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-delete-expr-019,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-020,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-021,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-delete-expr-022,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
complex-deletes-q3,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q4,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q5,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q10,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q11,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q12,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q13,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q14,Error: XPST0003: Unable to parse XPath: "(: Name: complex-deletes-q14 :) (: Description: Delete the document node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  delete nodes $input-context ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found. (: Name: complex-deletes-q14 :) (: Description: Delete the document node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  delete [Error is around here]nodes $input-context
id-replace-expr-011,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-replace-expr-012,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-replace-expr-013,Error: Should throw error XUTY0008.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0008'
id-replace-expr-014,Error: Should throw error XUDY0009.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0009'
id-replace-expr-015,Error: Should throw error XUTY0008.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0008'
id-replace-expr-016,Error: Should throw error XUTY0011.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0011'
id-replace-expr-022,Error: Should throw error XUTY0010.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0010'
id-replace-expr-028,Error: Should throw error XUDY0027.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0027'
id-replace-expr-030,Error: No selector counterpart for: computedTextConstructor.
id-replace-expr-045,Error: XPST0003: Unable to parse XPath: "(: Name: id-replace-expr-045 :) (: Description: Check namepsace propogation when replacing an attribute. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify replace node $e/@salaried with attribute hisco:salaried {"true"}    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-replace-expr-045 :) (: Description: Check namepsace propogation when replacing an attribute. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify replace node $e/@salaried with attribute hisco:salaried {"true"}    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-replace-expr-045-no-inherit,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify replace node $e/@salaried with attribute hisco:salaried {"true"}    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify replace node $e/@salaried with attribute hisco:salaried {"true"}    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-replace-expr-08,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-replace-expr-017,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-replace-expr-018,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-replace-expr-019,Error: Should throw error XUTY0008.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0008'
id-replace-expr-020,Error: Should throw error XUTY0008.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0008'
id-replace-expr-021,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
complex-replacevalues-q11,Error: XPST0008, The variable pos is not in scope.
complex-replacevalues-q12,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-rename-expr-010,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001' or Should throw error XPTY0004.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XPTY0004'
id-rename-expr-018,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.
id-rename-expr-033,Error: XPST0003: Unable to parse XPath: "(: Name: id-rename-expr-033 :) (: Description: Check namepsace propogation when renaming an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify rename node $e as xs:QName("hisco:employees")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-rename-expr-033 :) (: Description: Check namepsace propogation when renaming an element. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify rename node $e as xs:QName("hisco:employees")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-rename-expr-034,Error: XPST0003: Unable to parse XPath: "(: Name: id-rename-expr-034 :) (: Description: Check namepsace propogation when renaming an attribute. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify rename node $e/@salaried as xs:QName("hisco:salaried")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-rename-expr-034 :) (: Description: Check namepsace propogation when renaming an attribute. :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify rename node $e/@salaried as xs:QName("hisco:salaried")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-rename-expr-033-no-inherit,Error: XPST0003: Unable to parse XPath: " declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify rename node $e as xs:QName("hisco:employees")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found.  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify rename node $e as xs:QName("hisco:employees")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-rename-expr-034-no-inherit,Error: XPST0003: Unable to parse XPath: " (: Name: id-rename-expr-034 :) (: Description: Check namepsace propogation when renaming an attribute. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy $e := $myemps    modify rename node $e/@salaried as xs:QName("hisco:salaried")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found.  (: Name: id-rename-expr-034 :) (: Description: Check namepsace propogation when renaming an attribute. :)  declare copy-namespaces preserve, no-inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $myemps :=       <myco:employees salaried="false">                        <myco:employee id='100'>                           <myco:name>Samuel</myco:name>                        </myco:employee>                      </myco:employees> let $newemps :=    copy [Error is around here]$e := $myemps    modify rename node $e/@salaried as xs:QName("hisco:salaried")    return $e return     namespace-uri-for-prefix("hisco",                              $newemps/myco:employee[1])
id-rename-expr-035,Error: XPST0003: Unable to parse XPath: "(: Name: id-rename-expr-035 :) (: Description: Rename element nodes to be in a namespace (the default namespace). :) (: (Saxon bug report from Roger Costello - Feb 2010) :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $in :=           <FitnessCenter>             <Member level="platinum">                 <Name>Jeff</Name>                 <FavoriteColor>lightgrey</FavoriteColor>             </Member>             <Member level="gold">                 <Name>David</Name>                 <FavoriteColor>lightblue</FavoriteColor>             </Member>             <Member level="platinum">                 <Name>Roger</Name>                 <FavoriteColor>lightyellow</FavoriteColor>             </Member>         </FitnessCenter> let $newelement :=    copy $copy := $in    modify         for $i in $copy//*        return rename node $i as QName('http://www.gym.com', name($i))    return $copy return    $newelement/*[1]  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-rename-expr-035 :) (: Description: Rename element nodes to be in a namespace (the default namespace). :) (: (Saxon bug report from Roger Costello - Feb 2010) :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $in :=           <FitnessCenter>             <Member level="platinum">                 <Name>Jeff</Name>                 <FavoriteColor>lightgrey</FavoriteColor>             </Member>             <Member level="gold">                 <Name>David</Name>                 <FavoriteColor>lightblue</FavoriteColor>             </Member>             <Member level="platinum">                 <Name>Roger</Name>                 <FavoriteColor>lightyellow</FavoriteColor>             </Member>         </FitnessCenter> let $newelement :=    copy [Error is around here]$copy := $in    modify         for $i in $copy//*        return rename node $i as QName('http://www.gym.com', name($i))    return $copy return    $newelement/*[1]
id-rename-expr-036,Error: XPST0003: Unable to parse XPath: "(: Name: id-rename-expr-036 :) (: Description: Rename element nodes to be in a namespace with a prefix. :) (: (Saxon bug report from Roger Costello - Feb 2010) :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $in :=           <FitnessCenter>             <Member level="platinum">                 <Name>Jeff</Name>                 <FavoriteColor>lightgrey</FavoriteColor>             </Member>             <Member level="gold">                 <Name>David</Name>                 <FavoriteColor>lightblue</FavoriteColor>             </Member>             <Member level="platinum">                 <Name>Roger</Name>                 <FavoriteColor>lightyellow</FavoriteColor>             </Member>         </FitnessCenter> let $newelement :=    copy $copy := $in    modify         for $i in $copy//*        return rename node $i as QName('http://www.gym.com', concat('gym:', local-name($i)))    return $copy return    $newelement/*[1]  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-rename-expr-036 :) (: Description: Rename element nodes to be in a namespace with a prefix. :) (: (Saxon bug report from Roger Costello - Feb 2010) :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $in :=           <FitnessCenter>             <Member level="platinum">                 <Name>Jeff</Name>                 <FavoriteColor>lightgrey</FavoriteColor>             </Member>             <Member level="gold">                 <Name>David</Name>                 <FavoriteColor>lightblue</FavoriteColor>             </Member>             <Member level="platinum">                 <Name>Roger</Name>                 <FavoriteColor>lightyellow</FavoriteColor>             </Member>         </FitnessCenter> let $newelement :=    copy [Error is around here]$copy := $in    modify         for $i in $copy//*        return rename node $i as QName('http://www.gym.com', concat('gym:', local-name($i)))    return $copy return    $newelement/*[1]
id-rename-expr-037,Error: XPST0003: Unable to parse XPath: "(: Name: id-rename-expr-037 :) (: Description: Rename attribute nodes to be in a namespace. :) (: (Saxon bug report from Roger Costello - Feb 2010) :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $in :=           <FitnessCenter>             <Member level="platinum">                 <Name>Jeff</Name>                 <FavoriteColor>lightgrey</FavoriteColor>             </Member>             <Member level="gold">                 <Name>David</Name>                 <FavoriteColor>lightblue</FavoriteColor>             </Member>             <Member level="platinum">                 <Name>Roger</Name>                 <FavoriteColor>lightyellow</FavoriteColor>             </Member>         </FitnessCenter> let $newelement :=    copy $copy := $in    modify         for $i in $copy//@*        return rename node $i as QName('http://www.gym.com', concat('gym:', local-name($i)))    return $copy return    $newelement/*[1]  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-rename-expr-037 :) (: Description: Rename attribute nodes to be in a namespace. :) (: (Saxon bug report from Roger Costello - Feb 2010) :)  declare copy-namespaces preserve, inherit;  declare namespace myco="http://www.example.com/myco"; declare namespace hisco="http://www.example.com/hisco";  (: insert-start :) (: insert-end :)  let $in :=           <FitnessCenter>             <Member level="platinum">                 <Name>Jeff</Name>                 <FavoriteColor>lightgrey</FavoriteColor>             </Member>             <Member level="gold">                 <Name>David</Name>                 <FavoriteColor>lightblue</FavoriteColor>             </Member>             <Member level="platinum">                 <Name>Roger</Name>                 <FavoriteColor>lightyellow</FavoriteColor>             </Member>         </FitnessCenter> let $newelement :=    copy [Error is around here]$copy := $in    modify         for $i in $copy//@*        return rename node $i as QName('http://www.gym.com', concat('gym:', local-name($i)))    return $copy return    $newelement/*[1]
complex-renames-q6,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
complex-renames-q7,Error: XPST0008, The variable pos is not in scope.
complex-renames-q8,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-transform-expr-01,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-01 :) (: Description: Evaluation of transform expression with modify clause set to "()" :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] let $var2 := $input-context/works[1]/employee[2] return    copy $var2 := $var1   modify ()   return $var2". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-01 :) (: Description: Evaluation of transform expression with modify clause set to "()" :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] let $var2 := $input-context/works[1]/employee[2] return    copy [Error is around here]$var2 := $var1   modify ()   return $var2
id-transform-expr-02,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-02 :) (: Description: Evaluation of transform expression with modify clause set to a delete expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $newVar := $var   modify delete node $newVar/pnum[1]   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-02 :) (: Description: Evaluation of transform expression with modify clause set to a delete expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$newVar := $var   modify delete node $newVar/pnum[1]   return $newVar
id-transform-expr-03,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-03 :) (: Description: Evaluation of transform expression with modify clause set to a rename expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $newVar := $var   modify rename node $newVar/pnum[1] as "pnum1"   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-03 :) (: Description: Evaluation of transform expression with modify clause set to a rename expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$newVar := $var   modify rename node $newVar/pnum[1] as "pnum1"   return $newVar
id-transform-expr-04,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-04 :) (: Description: Evaluation of transform expression with modify clause set to an insert expression expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $newVar := $var   modify insert node <pnum1>P1-1</pnum1> after $newVar/pnum[1]   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-04 :) (: Description: Evaluation of transform expression with modify clause set to an insert expression expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$newVar := $var   modify insert node <pnum1>P1-1</pnum1> after $newVar/pnum[1]   return $newVar
id-transform-expr-05,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-05 :) (: Description: Evaluation of transform expression with modify clause set to a replace expression expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] let $var1 := <pnum>P1-1</pnum> return    copy $newVar := $var   modify replace node $newVar/pnum[1] with $var1   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-05 :) (: Description: Evaluation of transform expression with modify clause set to a replace expression expression. :) (: Transform of an element node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] let $var1 := <pnum>P1-1</pnum> return    copy [Error is around here]$newVar := $var   modify replace node $newVar/pnum[1] with $var1   return $newVar
id-transform-expr-06,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-06 :) (: Description: Evaluation of transform expression where multiple element nodes are bounded. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/child::employee return    copy $newVar := $var   modify delete node $newVar[position() > 1]   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-06 :) (: Description: Evaluation of transform expression where multiple element nodes are bounded. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/child::employee return    copy [Error is around here]$newVar := $var   modify delete node $newVar[position() > 1]   return $newVar
id-transform-expr-07,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-07 :) (: Description: Evaluation of a transform expression where an attribute is transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $newVar := $var   modify delete node $newVar/attribute::name   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-07 :) (: Description: Evaluation of a transform expression where an attribute is transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$newVar := $var   modify delete node $newVar/attribute::name   return $newVar
id-transform-expr-08,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-08 :) (: Description: Evaluation of a transform expression where a comment node is transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[13] return   copy $newVar := $var   modify delete node $newVar/child::comment()   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-08 :) (: Description: Evaluation of a transform expression where a comment node is transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[13] return   copy [Error is around here]$newVar := $var   modify delete node $newVar/child::comment()   return $newVar
id-transform-expr-09,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'FOER0000'
id-transform-expr-010,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-010 :) (: Description: Evaluation of a transform expression where two variables are bounded :) (: and only one is transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1] return    copy $newVar1 := $var/employee[1], $newVar2 := $var/employee[2]   modify delete node $newVar1/hours[1]   return ($newVar1, $newVar2)". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-010 :) (: Description: Evaluation of a transform expression where two variables are bounded :) (: and only one is transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1] return    copy [Error is around here]$newVar1 := $var/employee[1], $newVar2 := $var/employee[2]   modify delete node $newVar1/hours[1]   return ($newVar1, $newVar2)
id-transform-expr-011,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-011 :) (: Description: Evaluation of a transform expression where two variables are bounded :) (: and both ones are transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1] return    copy $newVar1 := $var/employee[1], $newVar2 := $var/employee[2]   modify delete node ($newVar1/hours[1], $newVar2/hours[1])   return ($newVar1, $newVar2)". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-011 :) (: Description: Evaluation of a transform expression where two variables are bounded :) (: and both ones are transformed. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1] return    copy [Error is around here]$newVar1 := $var/employee[1], $newVar2 := $var/employee[2]   modify delete node ($newVar1/hours[1], $newVar2/hours[1])   return ($newVar1, $newVar2)
id-transform-expr-012,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUST0001'
id-transform-expr-013,Error: Should throw error XUST0002.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUST0002'
id-transform-expr-014,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUST0001'
id-transform-expr-015,Error: Should throw error XUDY0014.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0014'
id-transform-expr-016,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-016 :) (: Description: Evaluates a transform expression, which inserts a node and deletes the same node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $newVar := $var   modify     (delete node $newVar/hours[1], insert node <hours>40</hours> as last into $newVar)   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-016 :) (: Description: Evaluates a transform expression, which inserts a node and deletes the same node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$newVar := $var   modify     (delete node $newVar/hours[1], insert node <hours>40</hours> as last into $newVar)   return $newVar
id-transform-expr-017,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-017 :) (: Description: Evaluates a transform expression, which deletes a node and then isnserts a node with the same node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $newVar := $var   modify     (insert node <hours>40</hours> as last into $newVar, delete node $newVar/hours[1])   return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-017 :) (: Description: Evaluates a transform expression, which deletes a node and then isnserts a node with the same node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$newVar := $var   modify     (insert node <hours>40</hours> as last into $newVar, delete node $newVar/hours[1])   return $newVar
id-transform-expr-018,Error: Should throw error XUST0002.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUST0002'
id-transform-expr-019,Error: Should throw error XUDY0015.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0015'
id-transform-expr-020,Error: Should throw error XUDY0016.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0016'
id-transform-expr-021,Error: Should throw error XUDY0015.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0015'
id-transform-expr-022,Error: Should throw error XUDY0016.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0016'
id-transform-expr-023,Error: Should throw error XUDY0017.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0017'
id-transform-expr-024,Error: Should throw error XUDY0017.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0017'
id-transform-expr-025,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-025 :) (: Description: Evaluates a transform expression, where an Element is modified by a "replace" expression and :) (: of its children is also updated by a "replace with value of" expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return   copy $newVar := $var   modify    (replace node $newVar/hours[1] with <hours>35</hours>, replace value of node $newVar with <newEmployee>New Employee</newEmployee>)     return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-025 :) (: Description: Evaluates a transform expression, where an Element is modified by a "replace" expression and :) (: of its children is also updated by a "replace with value of" expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return   copy [Error is around here]$newVar := $var   modify    (replace node $newVar/hours[1] with <hours>35</hours>, replace value of node $newVar with <newEmployee>New Employee</newEmployee>)     return $newVar
id-transform-expr-026,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
id-transform-expr-027,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
id-transform-expr-028,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.
id-transform-expr-029,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.
id-transform-expr-030,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.
id-transform-expr-031,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.
id-transform-expr-032,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
id-transform-expr-033,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-033 :) (: Description: Transform with later copy variable binding seeing earlier copy variable binding. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1] return    copy $var1 := $var/employee[1],        $var2 := $var/employee[$var1/hours[1] div 20]    modify delete node $var2/hours   return $var2 ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-033 :) (: Description: Transform with later copy variable binding seeing earlier copy variable binding. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1] return    copy [Error is around here]$var1 := $var/employee[1],        $var2 := $var/employee[$var1/hours[1] div 20]    modify delete node $var2/hours   return $var2
id-transform-expr-034,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-033 :) (: Description: Transform a document. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context   modify rename node $var1/works[1] as "workers"   return $var1 ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-033 :) (: Description: Transform a document. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context   modify rename node $var1/works[1] as "workers"   return $var1
id-transform-expr-035,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-035 :) (: Description: Transform an attribute. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return copy $var1 := $var/@name   modify replace value of node $var1 with "Ursla LeGuin"   return <newemp> { $var1 } </newemp> ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-035 :) (: Description: Transform an attribute. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return copy [Error is around here]$var1 := $var/@name   modify replace value of node $var1 with "Ursla LeGuin"   return <newemp> { $var1 } </newemp>
id-transform-expr-036,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-036 :) (: Description: Transform a text node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return copy $var1 := $var/empnum[1]/text()   modify replace value of node $var1 with "E43"   return <newemp><empnum>{ $var1 }</empnum></newemp> ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-036 :) (: Description: Transform a text node. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return copy [Error is around here]$var1 := $var/empnum[1]/text()   modify replace value of node $var1 with "E43"   return <newemp><empnum>{ $var1 }</empnum></newemp>
id-transform-expr-037,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-037 :) (: Description: Transform a comment. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[13] return copy $var1 := $var/comment()[1]   modify replace value of node $var1 with "testing"   return <newemp> { $var1 } </newemp> ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-037 :) (: Description: Transform a comment. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[13] return copy [Error is around here]$var1 := $var/comment()[1]   modify replace value of node $var1 with "testing"   return <newemp> { $var1 } </newemp>
id-transform-expr-038,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-038 :) (: Description: Transform a PI. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[13] return copy $var1 := $var/processing-instruction()   modify replace value of node $var1 with "testing"   return <newemp> { $var1 } </newemp> ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-038 :) (: Description: Transform a PI. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[13] return copy [Error is around here]$var1 := $var/processing-instruction()   modify replace value of node $var1 with "testing"   return <newemp> { $var1 } </newemp>
id-transform-expr-039,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-039 :) (: Description: Transform two elements copied from the same element. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy $var1 := $var, $var2 := $var    modify       (       replace value of node $var1/@name with "Pamela Seargent",       replace value of node $var2/@gender with "male"       )    return <result> { $var1, $var2 } </result> ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-039 :) (: Description: Transform two elements copied from the same element. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return    copy [Error is around here]$var1 := $var, $var2 := $var    modify       (       replace value of node $var1/@name with "Pamela Seargent",       replace value of node $var2/@gender with "male"       )    return <result> { $var1, $var2 } </result>
id-transform-expr-040,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-040 :) (: Description: Transform a document by changing the namespaces of its elements. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context modify    for $e in $var1//*    return rename node $e as fn:QName("http://www.example.com/xquery", concat("example:", local-name($e))) return $var1 ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-040 :) (: Description: Transform a document by changing the namespaces of its elements. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context modify    for $e in $var1//*    return rename node $e as fn:QName("http://www.example.com/xquery", concat("example:", local-name($e))) return $var1
id-transform-expr-041,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-041 :) (: Description: Transform a document by changing the namespaces of its elements. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context/works[1]/employee[1] modify rename node $var1 as "emp" return $var1 ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-041 :) (: Description: Transform a document by changing the namespaces of its elements. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context/works[1]/employee[1] modify rename node $var1 as "emp" return $var1
id-transform-expr-042,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-042 :) (: Description: Copy clause creates a new element node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context/BOOKLIST[1]/BOOKS[1] modify () return ($var1 is $input-context/BOOKLIST[1]/BOOKS[1]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-042 :) (: Description: Copy clause creates a new element node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context/BOOKLIST[1]/BOOKS[1] modify () return ($var1 is $input-context/BOOKLIST[1]/BOOKS[1])
id-transform-expr-043,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-043 :) (: Description: Copy clause changes the type of the new element node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1] modify () return ($var1 instance of element(*, xs:untyped),         $var1/TITLE[1] instance of element(*, xs:untyped)) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-043 :) (: Description: Copy clause changes the type of the new element node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1] modify () return ($var1 instance of element(*, xs:untyped),         $var1/TITLE[1] instance of element(*, xs:untyped))
id-transform-expr-044,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-044 :) (: Description: Copy clause changes the nilled property of the new element node. :)  declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1] modify () return empty(data($var1/LANGUAGE[1])) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-044 :) (: Description: Copy clause changes the nilled property of the new element node. :)  declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1] modify () return empty(data($var1/LANGUAGE[1]))
id-transform-expr-045,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-045 :) (: Description: Copy clause changes the idref property of the new element node. :)  declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context modify () return empty(idref("MMP", $var1/BOOKLIST[1]/BOOKS[1]/ITEM[1])) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-045 :) (: Description: Copy clause changes the idref property of the new element node. :)  declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context modify () return empty(idref("MMP", $var1/BOOKLIST[1]/BOOKS[1]/ITEM[1]))
id-transform-expr-046,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-046 :) (: Description: Copy clause changes the id property of the new element node. :)  declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context modify () return empty(id("MMP", $var1/BOOKLIST[1]/CATEGORIES[1])) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-046 :) (: Description: Copy clause changes the id property of the new element node. :)  declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context modify () return empty(id("MMP", $var1/BOOKLIST[1]/CATEGORIES[1]))
id-transform-expr-047,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-047 :) (: Description: Copy clause changes the id property of a new attribute node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context modify () return empty(id("MMP", $var1/BOOKLIST[1]/CATEGORIES[1])) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-047 :) (: Description: Copy clause changes the id property of a new attribute node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context modify () return empty(id("MMP", $var1/BOOKLIST[1]/CATEGORIES[1]))
id-transform-expr-048,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-048 :) (: Description: Copy clause changes the is-idrefs property of a new attribute node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context modify () return empty(idref("P", $var1/BOOKLIST[1]/BOOKS[1])) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-048 :) (: Description: Copy clause changes the is-idrefs property of a new attribute node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context modify () return empty(idref("P", $var1/BOOKLIST[1]/BOOKS[1]))
id-transform-expr-049,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-049 :) (: Description: Copy clause changes the type of a new attribute node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context/BOOKLIST[1]/BOOKS[1] modify () return ($var1/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic)) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-049 :) (: Description: Copy clause changes the type of a new attribute node. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context/BOOKLIST[1]/BOOKS[1] modify () return ($var1/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic))
id-transform-expr-050,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-050 :) (: Description: Copy clause changes the type of an xml:id attribute node, but not the is-id property. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := $input-context modify () return (        $var1/BOOKLIST[1]/BOOKS[1]/ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff01", $var1/BOOKLIST[1]/BOOKS[1]/ITEM[last()]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: id-transform-expr-050 :) (: Description: Copy clause changes the type of an xml:id attribute node, but not the is-id property. :)  declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := $input-context modify () return (        $var1/BOOKLIST[1]/BOOKS[1]/ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff01", $var1/BOOKLIST[1]/BOOKS[1]/ITEM[last()]))        )
id-transform-expr-051,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-051 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces preserve, inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy $b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-transform-expr-051 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces preserve, inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy [Error is around here]$b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"])
id-transform-expr-052,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-052 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces preserve, no-inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy $b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-transform-expr-052 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces preserve, no-inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy [Error is around here]$b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"])
id-transform-expr-053,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-053 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces no-preserve, inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy $b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-transform-expr-053 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces no-preserve, inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy [Error is around here]$b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"])
id-transform-expr-054,Error: XPST0003: Unable to parse XPath: "(: Name: id-transform-expr-054 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces no-preserve, no-inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy $b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"]) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-transform-expr-054 :) (: Description: The copy clause sometimes changes the in-scope-namespaces. :)  declare copy-namespaces no-preserve, no-inherit;  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $a := <x:a xmlns:x="http://www.example.com/a"><b/></x:a> let $copyb := copy [Error is around here]$b := $a/b               modify ()               return $b return empty(in-scope-prefixes($copyb)[.="x"])
id-transform-expr-055,Error: Should throw error XUDY0015.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0015'
id-transform-expr-056,Error: Should throw error XUDY0015.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0015'
id-transform-expr-057,Error: Should throw error XUDY0016.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0016'
id-transform-expr-058,Error: Should throw error XUDY0017.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUDY0017'
compatibility-001,Error: Should throw error XUDY0015.
compatibility-002,Error: Should throw error XUDY0015.
compatibility-003,Error: Should throw error XUDY0015.
compatibility-004,Error: Should throw error XUDY0015.
compatibility-005,Error: Should throw error XUDY0015.
compatibility-006,Error: Should throw error XUDY0015.
compatibility-007,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-008,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-009,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-010,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-011,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-012,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-013,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-014,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-015,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-016,Error: Should throw error XUDY0016.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUDY0016'
compatibility-029,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
compatibility-030,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-flwor-expr-01,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-02,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-03,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-04,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-05,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-06,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-07,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-08,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-flwor-expr-09,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-010,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-011,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-012,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-013,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-014,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-015,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-016,Error: Should throw error XUST0001.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUST0001'
id-flwor-expr-017,Error: XPST0003: Unable to parse XPath: "(: Name: id-flwor-expr-017 :) (: Description: Evaluation of a transform expression use with FLWOR expression where let clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   let $var := $input-context/employees[1]/employee[1] let $var1 := copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar return $var1 ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-flwor-expr-017 :) (: Description: Evaluation of a transform expression use with FLWOR expression where let clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   let $var := $input-context/employees[1]/employee[1] let $var1 := copy [Error is around here]$newVar := $var   modify delete node $newVar/salary[1]  return $newVar return $var1
id-flwor-expr-018,Error: XPST0003: Unable to parse XPath: "(: Name: id-flwor-expr-018 :) (: Description: Evaluation of a transform expression use with FLWOR expression where "for" clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   let $var := $input-context/employees[1]/employee[1] for $var1 in (copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar) return $var1 ". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-flwor-expr-018 :) (: Description: Evaluation of a transform expression use with FLWOR expression where "for" clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   let $var := $input-context/employees[1]/employee[1] for $var1 in (copy [Error is around here]$newVar := $var   modify delete node $newVar/salary[1]  return $newVar) return $var1
id-flwor-expr-019,Error: XPST0003: Unable to parse XPath: "(: Name: id-flwor-expr-019 :) (: Description: Evaluation of a transform expression use with FLWOR expression where the "where" clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   let $var := $input-context/employees[1]/employee[1] where copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar return $var". Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "$" found. (: Name: id-flwor-expr-019 :) (: Description: Evaluation of a transform expression use with FLWOR expression where the "where" clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   let $var := $input-context/employees[1]/employee[1] where copy [Error is around here]$newVar := $var   modify delete node $newVar/salary[1]  return $newVar return $var
id-flwor-expr-020,Error: XPST0003: Unable to parse XPath: "(: Name: id-flwor-expr-020 :) (: Description: Evaluation of a transform expression use with FLWOR expression where the "order by" clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] order by (copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar) descending return $var ". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-flwor-expr-020 :) (: Description: Evaluation of a transform expression use with FLWOR expression where the "order by" clause is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] order by (copy [Error is around here]$newVar := $var   modify delete node $newVar/salary[1]  return $newVar) descending return $var
id-flwor-expr-021,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-flwor-expr-022,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-flwor-expr-024,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "for", "ge", "group", "gt", "idiv", "instance", "intersect", "is", "le", "let", "lt", "mod", "ne", "or", "order", "return", "stable", "to", "treat", "union", "where", "|", or "||" but "n" found.' to equal 'XUST0001'
id-typeswitch-expr-01,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-02,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-03,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-04,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-05,Error: Should throw error FOER0000.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'FOER0000'
id-typeswitch-expr-06,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-07,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-08,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-09,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-010,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-011,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-012,Error: Should throw error FOER0000.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'FOER0000'
id-typeswitch-expr-013,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-014,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-015,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-016,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-017,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-018,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-019,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-020,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-021,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-022,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-023,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-024,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-025,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-026,Error: Should throw error FOER0000.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'FOER0000'
id-typeswitch-expr-027,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-028,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-typeswitch-expr-029,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-029 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the operand is an updating (transform) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch(copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar)  case $i as xs:string     return "not this one"  case $i as xs:double     return "not this one"  default $i    return ($i, $var)". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-029 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the operand is an updating (transform) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch[Error is around here](copy $newVar := $var   modify delete node $newVar/salary[1]  return $newVar)  case $i as xs:string     return "not this one"  case $i as xs:double     return "not this one"  default $i    return ($i, $var)
id-typeswitch-expr-030,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-030 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "case") is an updating (transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/hours[1]     return $newVar)                            case $i as xs:double    return ()  default    return ()". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-030 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "case") is an updating (transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/hours[1]     return $newVar)                            case $i as xs:double    return ()  default    return ()
id-typeswitch-expr-031,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-031 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "default") is an updating (a transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (copy $newVar := $var modify delete node $newVar/hours[2]    return $newVar)". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-031 :) (: Description: Evaluation of a transform expression used with typeswitch expression where the branch (a "default") is an updating (a transform) expression. :) (: Other branches are the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:string     return ()  case $i as xs:double     return ()   default    return (copy $newVar := $var modify delete node $newVar/hours[2]    return $newVar)
id-typeswitch-expr-032,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-032 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (a "case") is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:int    return (copy $newVar := $var modify delete node $newVar/hours[1]    return $newVar)                                                          case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default  return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-032 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (a "case") is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:int    return (copy $newVar := $var modify delete node $newVar/hours[1]    return $newVar)                                                          case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default  return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-typeswitch-expr-033,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-033 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (the default) is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=$input-context/works[1]/employee[2] return typeswitch(xs:int(1))  case $i as xs:string     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return (copy $newVar := $var modify delete node $newVar/hours[2]     return $newVar) ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-033 :) (: Description: Evaluation of a transform expression used with typeswitch expression where branch (the default) is an updating (a transform) expression. :) (: All other branches return "fn:error()". :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=$input-context/works[1]/employee[2] return typeswitch[Error is around here](xs:int(1))  case $i as xs:string     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  case $i as xs:double     return fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))  default     return (copy $newVar := $var modify delete node $newVar/hours[2]     return $newVar)
id-typeswitch-expr-034,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-034 :) (: Description: Evaluation of a transform expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch(xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar)   case $i as xs:double     return "This test should not fail"  default     return "This test should not fail"". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-034 :) (: Description: Evaluation of a transform expression used with typeswitch expression where a branch (a "case") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch[Error is around here](xs:int(1))  case $i as xs:int     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar)   case $i as xs:double     return "This test should not fail"  default     return "This test should not fail"
id-typeswitch-expr-035,Error: XPST0003: Unable to parse XPath: "(: Name: id-typeswitch-expr-035 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch(xs:int(1))  case $i as xs:string         return "This test should not fail"  case $i as xs:double     return "This test should not fail"  default     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar) ". Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found. (: Name: id-typeswitch-expr-035 :) (: Description: Evaluation of insert expression used with typeswitch expression where a branch (the "default") is an updating expression. :) (: All other branches return a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[1] return typeswitch[Error is around here](xs:int(1))  case $i as xs:string         return "This test should not fail"  case $i as xs:double     return "This test should not fail"  default     return (copy $newVar := $var modify delete node $newVar/salary[1]     return $newVar)
id-typeswitch-expr-036,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-037,SyntaxError: Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.
id-typeswitch-expr-038,Error: Should throw error XUST0001.: expected 'Expected "!", "!=", "#", "*", "+", ",", "-", "/", "//", ":", ":*", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", [A-Z_a-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�], [\\-.0-9·̀-ͯ‿⁀], [�-�], or end of input but "(" found.' to equal 'XUST0001'
id-conditional-expr-01,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-conditional-expr-02,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-conditional-expr-03,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-conditional-expr-04,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-conditional-expr-05,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-conditional-expr-06,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001'
id-conditional-expr-07,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-conditional-expr-08,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-conditional-expr-09,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-conditional-expr-010,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
id-conditional-expr-011,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-conditional-expr-012,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUST0001'
id-conditional-expr-015,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-016,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-017,Error: Should throw error XUST0001.
id-conditional-expr-018,Error: Should throw error XUST0001.
id-conditional-expr-021,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-022,Error: XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?
id-conditional-expr-023,Error: Should throw error XUST0001.
id-conditional-expr-024,Error: Should throw error XUST0001.: expected 'XUDY0027: The target for a replace expression should not be empty' to equal 'XUST0001'
id-conditional-expr-025,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-025 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "then") is an updating expression. :) (: The "else" returns the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:true()) then     (copy $newVar := $var modify delete node $newVar/hours[1]     return $newVar)  else   ()". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-025 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "then") is an updating expression. :) (: The "else" returns the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:true()) then     (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1]     return $newVar)  else   ()
id-conditional-expr-026,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-026 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "else") is an updating expression. :) (: The "then" returns the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=$input-context/works[1]/employee[2] return if (fn:false()) then    () else    (copy $newVar := $var modify delete node $newVar/hours[1]    return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-026 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "else") is an updating expression. :) (: The "then" returns the empty sequence. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=$input-context/works[1]/employee[2] return if (fn:false()) then    () else    (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1]    return $newVar)
id-conditional-expr-027,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-027 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "then") is an updating expression. :) (: The "else" returns is an invokation to the fn:error function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:true()) then   (copy $newVar := $var modify delete node $newVar/hours[1]   return $newVar) else   fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-027 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "then") is an updating expression. :) (: The "else" returns is an invokation to the fn:error function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:true()) then   (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1]   return $newVar) else   fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
id-conditional-expr-028,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-028 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "else") is an updating expression. :) (: The "then" returns is an invokation to the fn:error function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:false()) then   fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) else   (copy $newVar := $var modify delete node $newVar/hours[1]   return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-028 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "else") is an updating expression. :) (: The "then" returns is an invokation to the fn:error function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:false()) then   fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) else   (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1]   return $newVar)
id-conditional-expr-029,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-029 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "then") is an updating expression. :) (: The "else" returns a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[2] return if (fn:true()) then   (copy $newVar := $var modify delete node $newVar/salary[1]   return $newVar) else   "This test should not fail"". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-029 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "then") is an updating expression. :) (: The "else" returns a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[2] return if (fn:true()) then   (copy [Error is around here]$newVar := $var modify delete node $newVar/salary[1]   return $newVar) else   "This test should not fail"
id-conditional-expr-030,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-030 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "else") is an updating expression. :) (: The "then" returns a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[2] return if (fn:false()) then   "This test should fail" else   (copy $newVar := $var modify delete node $newVar/salary[1]   return $newVar) ". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-030 :) (: Description: Evaluation of a transform expression used with conditional expression where a branch (the "else") is an updating expression. :) (: The "then" returns a string. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[2] return if (fn:false()) then   "This test should fail" else   (copy [Error is around here]$newVar := $var modify delete node $newVar/salary[1]   return $newVar)
id-conditional-expr-031,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-031 :) (: Description: Evaluates a transform expression together with a conditional expression where the if-clause is an non-updating (transform) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar) then     "This test should not fail" else    "This test should not fail"". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-031 :) (: Description: Evaluates a transform expression together with a conditional expression where the if-clause is an non-updating (transform) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar) then     "This test should not fail" else    "This test should not fail"
id-conditional-expr-032,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-conditional-expr-033,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-conditional-expr-034,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-conditional-expr-035,Error: XPST0003: Unable to parse XPath: "(: Name: id-conditional-expr-035 :) (: Description: Evaluates a conditional expression, where both braches contains a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:true()) then  copy $newVar := $var modify delete node $newVar/hours[1] return $newVar else  copy $newVar := $var modify delete node $newVar/hours[1] return $newVar". Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "else", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-conditional-expr-035 :) (: Description: Evaluates a conditional expression, where both braches contains a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return if (fn:true()) then  copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar else  copy $newVar := $var modify delete node $newVar/hours[1] return $newVar
id-conditional-expr-038,Error: Should throw error XUST0001.
id-comma-expr-01,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-comma-expr-02,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-comma-expr-03,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-comma-expr-04,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'FOER0000'
id-comma-expr-05,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'FOER0000'
id-comma-expr-06,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-comma-expr-07,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-comma-expr-08,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-comma-expr-09,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-comma-expr-010,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
id-comma-expr-011,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'FOER0000'
id-comma-expr-012,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'FOER0000'
id-comma-expr-013,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-comma-expr-014,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-comma-expr-015,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
id-comma-expr-018,Error: Should throw error FOER0000.: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to equal 'FOER0000'
id-comma-expr-019,Error: Should throw error FOER0000.: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to equal 'FOER0000'
id-comma-expr-020,Error: Should throw error XUST0001.
id-comma-expr-021,Error: Should throw error XUST0001.
id-comma-expr-025,Error: Should throw error FOER0000.: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to equal 'FOER0000'
id-comma-expr-026,Error: Should throw error FOER0000.: expected 'XPST0017: Function fn:error with arity of 1 not registered. Did you mean "Q{http://www.w3.org/2001/XMLSchema}error (xs:anyAtomicType?)"?' to equal 'FOER0000'
id-comma-expr-027,Error: Should throw error XUST0001.
id-comma-expr-028,Error: Should throw error XUST0001.
id-comma-expr-029,Error: XPST0003: Unable to parse XPath: "(: Name: id-comma-expr-029 :) (: Description: Evaluation of a transform expression used with comma expression where both :) (: expressions are updating expressions.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return   (copy $newVar1 := $var modify delete node $newVar1/hours[1] return $newVar1,    copy $newVar2 := $var modify delete node $newVar2/hours[2] return $newVar2)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-comma-expr-029 :) (: Description: Evaluation of a transform expression used with comma expression where both :) (: expressions are updating expressions.  :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return   (copy [Error is around here]$newVar1 := $var modify delete node $newVar1/hours[1] return $newVar1,    copy $newVar2 := $var modify delete node $newVar2/hours[2] return $newVar2)
id-comma-expr-030,Error: XPST0003: Unable to parse XPath: "(: Name: id-comma-expr-030 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is an updating expression.  The second one is the empty sequence :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return   (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar,())". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-comma-expr-030 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is an updating expression.  The second one is the empty sequence :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[2] return   (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar,())
id-comma-expr-031,Error: XPST0003: Unable to parse XPath: "(: Name: id-comma-expr-031 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: the first expression is the empty sequence.  The second one is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=  $input-context/works[1]/employee[1] return   ((), copy $newVar := $var modify delete node $newVar/hours[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-comma-expr-031 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: the first expression is the empty sequence.  The second one is an updating expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=  $input-context/works[1]/employee[1] return   ((), copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar)
id-comma-expr-032,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found.' to equal 'FOER0000'
id-comma-expr-033,Error: Should throw error FOER0000.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found.' to equal 'FOER0000'
id-comma-expr-034,Error: XPST0003: Unable to parse XPath: "(: Name: id-comma-expr-034 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is an updating expression and the second one is a mathematical expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=  $input-context/employees[1]/employee[2] return   (copy $newVar := $var modify delete node $newVar/salary[1] return $newVar, xs:integer(1) + xs:integer(2))". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-comma-expr-034 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is an updating expression and the second one is a mathematical expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var :=  $input-context/employees[1]/employee[2] return   (copy [Error is around here]$newVar := $var modify delete node $newVar/salary[1] return $newVar, xs:integer(1) + xs:integer(2))
id-comma-expr-035,Error: XPST0003: Unable to parse XPath: "(: Name: id-comma-expr-035 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is a mathematical expression and the second one is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[3] return   (xs:integer(1) + xs:integer(2), copy $newVar := $var modify delete node $newVar/salary[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-comma-expr-035 :) (: Description: Evaluation of a transform expression used with comma expression where the :) (: first expression is a mathematical expression and the second one is a transform expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/employees[1]/employee[3] return   (xs:integer(1) + xs:integer(2), copy [Error is around here]$newVar := $var modify delete node $newVar/salary[1] return $newVar)
id-comma-expr-038,Error: Should throw error XUST0001.
parenthesized-expr-02,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-function-call-01,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-function-call-02,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-function-call-03,Error: Should throw error XUST0001.: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for replaceFunction is incorrect. Expected exactly one' to equal 'XUST0001'
id-function-call-04,Error: Should throw error XUST0001.: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for renameFunction is incorrect. Expected exactly one' to equal 'XUST0001'
id-function-call-05,Error: XPST0003: Unable to parse XPath: "(: Name: id-function-call-05 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: the function call contains an "updating" (transform) expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare function     local:transformFunction($e as xs:anyAtomicType)     {    let $e1 := $e    return      $e1    };     let $arg1 := $input-context/employees[1]/employee[1] return   concat('"', local:transformFunction(copy $newVar := $arg1 modify delete node $newVar/salary[1] return $newVar), '"')". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-function-call-05 :) (: Description: Evaluation of a transform expression used with function declaration. :) (: the function call contains an "updating" (transform) expression :)  (: insert-start :) declare variable $input-context external; (: insert-end :)   declare function     local:transformFunction($e as xs:anyAtomicType)     {    let $e1 := $e    return      $e1    };     let $arg1 := $input-context/employees[1]/employee[1] return   concat('"', local:transformFunction(copy [Error is around here]$newVar := $arg1 modify delete node $newVar/salary[1] return $newVar), '"')
id-function-call-06,Error: Should throw error XUST0001.: expected 'XPTY0004: Multiplicity of function argument of type xs:anyAtomicTypenull for renameFunction is incorrect. Expected exactly one' to equal 'XUST0001'
id-other-expr-01,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", ";", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-02,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", ";", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-03,Error: Should throw error XUST0001.: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to equal 'XUST0001'
id-other-expr-04,Error: Should throw error XUST0001.: expected 'Not implemented: only external variable declaration without default value is implemented in XQuery modules' to equal 'XUST0001'
id-other-expr-05,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-05 :) (: Description: Evaluates usage of an updating expression (transform) in initializing expression for variable declaration. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare variable $x := $input-context/works[1]/employee[1]; declare variable $y as element() := copy $newVar := $x modify delete node $newVar/hours[1] return $newVar;  $y". Expected " ", "!", "!=", "(", "(:", "*", "+", "-", "/", "//", ";", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-05 :) (: Description: Evaluates usage of an updating expression (transform) in initializing expression for variable declaration. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  declare variable $x := $input-context/works[1]/employee[1]; declare variable $y as element() := copy [Error is around here]$newVar := $x modify delete node $newVar/hours[1] return $newVar;  $y
id-other-expr-06,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-07,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-08,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-09,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-010,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-010 :)\n(: Description: Evaluates usage of an updating expression (rename) as part of a logical (and) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() and (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-011,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-011 :)\n(: Description: Evaluates usage of an updating expression (replace) as part of a logical (and) expression and usage of fn:true() function. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\nfn:true() and (replace node $input-context/employees[1]/employee[1]/salary[1] with <salary1>120000</salary1>) is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-012,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-013,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-013 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a logical (and) expression and usage of fn:true() function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  fn:true() and (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-013 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a logical (and) expression and usage of fn:true() function. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  fn:true() and (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar)
id-other-expr-014,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-014 :)\n(: Description: Evaluates usage of an updating expression (rename) as part of a Node Comparison (is) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) is (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-015,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-016,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-016 :)\n(: Description: Evaluates usage of an updating expression (replace) as part of a Node Comparison (is) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) is (replace node $input-context/employees[1]/employee[1]/salary[1] with <salary1>120000</salary1>) is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-017,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-017 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  ($var) is (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-017 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression. :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  ($var) is (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar)
id-other-expr-018,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-018 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression (both operands are transform expressions). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar) is (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-018 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a node comparison (is) expression (both operands are transform expressions). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var := $input-context/works[1]/employee[1] return  (copy [Error is around here]$newVar := $var modify delete node $newVar/hours[1] return $newVar) is (copy $newVar := $var modify delete node $newVar/hours[1] return $newVar)
id-other-expr-019,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-020,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-021,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-021 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (ne) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) ne (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-022,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-022 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (gt operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) gt (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-023,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-023 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (lt operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) lt (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-024,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-024 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (le operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) le (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-025,Error: Should throw error XUST0001.: expected 'The expression (: Name: id-other-expr-025 :)\n(: Description:  Evaluates usage of an updating expression (rename) as part of a value Comparison (ge operator) expression. :)\n\n(: insert-start :)\ndeclare variable $input-context external;\n(: insert-end :)\n\n($input-context/employees[1]/employee[1]/salary[1]) ge (rename node $input-context/employees[1]/employee[1]/salary[1] as "salary1") is not updating and can not be executed as an updating expression.' to equal 'XUST0001'
id-other-expr-26,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-027,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-028,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
id-other-expr-029,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-029 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (union operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] let $var2 := $input-context/works[1]/employee[2] return (copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar) union (copy $newVar := $var2 modify delete node $newVar/hours[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-029 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (union operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] let $var2 := $input-context/works[1]/employee[2] return (copy [Error is around here]$newVar := $var1 modify delete node $newVar/hours[1] return $newVar) union (copy $newVar := $var2 modify delete node $newVar/hours[1] return $newVar)
id-other-expr-030,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-030 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (intersect operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] return fn:count((copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar) intersect (copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar))". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-030 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (intersect operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] return fn:count((copy [Error is around here]$newVar := $var1 modify delete node $newVar/hours[1] return $newVar) intersect (copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar))
id-other-expr-031,Error: XPST0003: Unable to parse XPath: "(: Name: id-other-expr-031 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (except operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] let $var2 := $input-context/works[1]/employee[2] return (copy $newVar := $var1 modify delete node $newVar/hours[1] return $newVar) except (copy $newVar := $var2 modify delete node $newVar/hours[1] return $newVar)". Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "$" found. (: Name: id-other-expr-031 :) (: Description: Evaluates usage of an non updating expression (transform) as part of a sequence expression (except operator). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  let $var1 := $input-context/works[1]/employee[1] let $var2 := $input-context/works[1]/employee[2] return (copy [Error is around here]$newVar := $var1 modify delete node $newVar/hours[1] return $newVar) except (copy $newVar := $var2 modify delete node $newVar/hours[1] return $newVar)
id-other-expr-032,Error: Should throw error XUST0001.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUST0001'
fn-put-001,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-007,Error: Should throw error FOUP0002.: expected 'No selector counterpart for: computedDocumentConstructor.' to equal 'FOUP0002'
fn-put-008,Error: Should throw error XUST0001.: expected 'No selector counterpart for: computedDocumentConstructor.' to equal 'XUST0001'
fn-put-009,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
fn-put-011,Error: Should throw error FODC0002.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'FODC0002' or Should throw error FODC0005.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'FODC0005'
fn-put-012,Error: Should throw error XUDY0031.: expected 'No selector counterpart for: computedDocumentConstructor.' to equal 'XUDY0031'
fn-put-013,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-014,Error: Should throw error XUDY0031.: expected 'No selector counterpart for: computedDocumentConstructor.' to equal 'XUDY0031'
put-001,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-002,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-010,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
attribute-errors-q1,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q2,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q3,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q4,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q5,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q6,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q7,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q9,Error: Should throw error XUDY0021.
attribute-errors-q10,Error: Should throw error XUDY0021.
attribute-errors-q12,Error: Should throw error XUDY0021.
attribute-errors-q13,Error: Should throw error XUDY0021.
attribute-errors-q14,Error: XPST0003: Unable to parse XPath: "(: Name: attribute-errors-q14 :) (: Description: Multiple replace of attributes, where one replacement attribute has the same name as the attribute removed by the other replace (ambiguous). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $in := $input-context/works/employee[1] modify (   replace node $in/@name with attribute {"salary"} {"10"},   replace node $in/@gender with attribute {"name"} {"Blodwyn Jones"} ) return $in ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: attribute-errors-q14 :) (: Description: Multiple replace of attributes, where one replacement attribute has the same name as the attribute removed by the other replace (ambiguous). :)  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$in := $input-context/works/employee[1] modify (   replace node $in/@name with attribute {"salary"} {"10"},   replace node $in/@gender with attribute {"name"} {"Blodwyn Jones"} ) return $in
attribute-errors-q15,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q16,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
attribute-errors-q17,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0021'
namespace-errors-q1,Error: Should throw error XUDY0023.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0023'
namespace-errors-q2,Error: Should throw error XUDY0023.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0023'
namespace-errors-q3,Error: Should throw error XUDY0023.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0023'
namespace-errors-q9,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0024'
namespace-errors-q10,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0024'
namespace-errors-q14,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0024'
namespace-errors-q15,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0024'
namespace-errors-q16,Error: InvalidStateError: Namespace prefix declarations cannot be used to undeclare a namespace (use a default namespace declaration instead)
namespace-errors-q17,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0024'
namespace-errors-q18,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUDY0024'
mergeUpdates-001,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
mergeUpdates-002,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUDY0024'
applyUpdates-001,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-002,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-003,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-004,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-005,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-006,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-007,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-008,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-009,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-010,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-011,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
applyUpdates-012,Error: expected '<root>1</root>' to equal '<root>0</root>'
applyUpdates-013,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-014,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-016,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUDY0021'
applyUpdates-021,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-022,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
applyUpdates-023,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUDY0021'
applyUpdates-024,Error: Should throw error XUDY0021.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUDY0021'
applyUpdates-025,Error: expected '<root>\n   E1\n   P1\n   40\n  </root>' to equal '<root><employee gender="Jane Doe 1" name="female">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </employee></root>'
applyUpdates-026,Error: expected '<root>\n   E1\n   P1\n   40\n  </root>' to equal '<root><employee gender="Jane Doe 1" name="Sylvia">\n   <empnum>E1</empnum>\n   <pnum>P1</pnum>\n   <hours>40</hours>\n  </employee></root>'
setToUntyped-001,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-001 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-001 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-002,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-002 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] as first into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-002 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] as first into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-003,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-003 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] as last into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-003 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] as last into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-004,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-004 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] before $var1/test[1]/*[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-004 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] before $var1/test[1]/*[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-005,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-005 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] after $var1/test[1]/*[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-005 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] after $var1/test[1]/*[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-006,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-006 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify replace node $var1/test[1]/*[1] with $input-context/BOOKLIST[1] return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-006 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify replace node $var1/test[1]/*[1] with $input-context/BOOKLIST[1] return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-007,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-007 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-007 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1] into $var1/test[1]  return (        $var1/test[1]/BOOKLIST[1] instance of element(*, xs:untyped),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] eq "2002-12-31",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1] instance of element(*, xs:untyped),        data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/PUB-DATE[1]) instance of xs:untypedAtomic,        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT eq "in",        $var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        empty(data($var1/test[1]/BOOKLIST[1]/BOOKS[1]/ITEM[1]/LANGUAGE[1])),        $var1/test[1]/BOOKLIST[1]/BOOKS[1]//ITEM[last()]/@xml:id instance of attribute(*, xs:untypedAtomic),        empty(id("jff001", $var1/test[1])),        empty(idref("MMP", $var1/test[1])),        empty(id("MMP", $var1/test[1]))        )
setToUntyped-008,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-008 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT into $var1/test[1] return (        $var1/test[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        $var1/test[1]/@UNIT eq "in"        ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-008 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test><content/></test> } modify insert node $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1]/DIMENSIONS[1]/@UNIT into $var1/test[1] return (        $var1/test[1]/@UNIT instance of attribute(*, xs:untypedAtomic),        $var1/test[1]/@UNIT eq "in"        )
setToUntyped-009,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-009 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test oldattr="abc"><content/></test> } modify replace node $var1/test[1]/@oldattr with $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1]/@CAT return     (     $var1/test[1]/@CAT instance of attribute(*, xs:untypedAtomic),     $var1/test[1]/@CAT instance of attribute(*, xs:string)     ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-009 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction strip; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test oldattr="abc"><content/></test> } modify replace node $var1/test[1]/@oldattr with $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1]/@CAT return     (     $var1/test[1]/@CAT instance of attribute(*, xs:untypedAtomic),     $var1/test[1]/@CAT instance of attribute(*, xs:string)     )
setToUntyped-010,Error: XPST0003: Unable to parse XPath: "(: Name: setToUntyped-009 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction preserve; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy $var1 := document { <test oldattr="abc"><content/></test> } modify replace node $var1/test[1]/@oldattr with $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1]/@CAT return     (     $var1/test[1]/@CAT instance of attribute(*, xs:untypedAtomic),     $var1/test[1]/@CAT instance of attribute(*, xs:string)     ) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Name: setToUntyped-009 :) (: Description: Check that all properties are set correctly by upd:setToUntyped. :)  declare construction preserve; declare default element namespace "http://ns.example.com/books2";  (: insert-start :) declare variable $input-context external; (: insert-end :)  copy [Error is around here]$var1 := document { <test oldattr="abc"><content/></test> } modify replace node $var1/test[1]/@oldattr with $input-context/BOOKLIST[1]/BOOKS[1]/ITEM[1]/@CAT return     (     $var1/test[1]/@CAT instance of attribute(*, xs:untypedAtomic),     $var1/test[1]/@CAT instance of attribute(*, xs:string)     )
propagateNamespaces01,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces preserve, inherit; declare boundary-space preserve;  copy $data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. declare copy-namespaces preserve, inherit; declare boundary-space preserve;  copy [Error is around here]$data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>
propagateNamespaces02,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces preserve, no-inherit; declare boundary-space preserve;  copy $data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. declare copy-namespaces preserve, no-inherit; declare boundary-space preserve;  copy [Error is around here]$data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>
propagateNamespaces03,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces no-preserve, inherit; declare boundary-space preserve;  copy $data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. declare copy-namespaces no-preserve, inherit; declare boundary-space preserve;  copy [Error is around here]$data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>
propagateNamespaces04,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces no-preserve, no-inherit; declare boundary-space preserve;  copy $data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. declare copy-namespaces no-preserve, no-inherit; declare boundary-space preserve;  copy [Error is around here]$data := <v xmlns:a="a-one" xmlns:b="b-one"/> modify    insert node        <w>         <x xmlns:a="a-two">           <y xmlns:b="b-two"><z/></y>         </x>       </w>   into $data return     let $w := $data/w    let $x := $w/x    let $y := $x/y    let $z := $y/z    return <result>   <w>{namespace-uri-for-prefix("a", $w), namespace-uri-for-prefix("b",$w)}</w>   <x>{namespace-uri-for-prefix("a", $x), namespace-uri-for-prefix("b",$x)}</x>   <y>{namespace-uri-for-prefix("a", $y), namespace-uri-for-prefix("b",$y)}</y>   <z>{namespace-uri-for-prefix("a", $z), namespace-uri-for-prefix("b",$z)}</z> </result>
propagateNamespaces05,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces preserve, inherit; declare boundary-space preserve;  declare default element namespace "http://example.org";  copy $x := <x xmlns="foo" xmlns:a="a-ns"/> modify    insert node <y/> into $x return <result>   <x>{namespace-uri-for-prefix("", $x), namespace-uri-for-prefix("a", $x)}</x>   <y>{namespace-uri-for-prefix("", $x/y), namespace-uri-for-prefix("a", $x/y)}</y> </result>". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. declare copy-namespaces preserve, inherit; declare boundary-space preserve;  declare default element namespace "http://example.org";  copy [Error is around here]$x := <x xmlns="foo" xmlns:a="a-ns"/> modify    insert node <y/> into $x return <result>   <x>{namespace-uri-for-prefix("", $x), namespace-uri-for-prefix("a", $x)}</x>   <y>{namespace-uri-for-prefix("", $x/y), namespace-uri-for-prefix("a", $x/y)}</y> </result>
propagateNamespaces06,Error: XPST0003: Unable to parse XPath: "declare copy-namespaces preserve, no-inherit; declare boundary-space preserve;  declare default element namespace "http://example.org";  copy $x := <x xmlns="foo" xmlns:a="a-ns"/> modify    insert node <y/> into $x return <result>   <x>{namespace-uri-for-prefix("", $x), namespace-uri-for-prefix("a", $x)}</x>   <y>{namespace-uri-for-prefix("", $x/y), namespace-uri-for-prefix("a", $x/y)}</y> </result>". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. declare copy-namespaces preserve, no-inherit; declare boundary-space preserve;  declare default element namespace "http://example.org";  copy [Error is around here]$x := <x xmlns="foo" xmlns:a="a-ns"/> modify    insert node <y/> into $x return <result>   <x>{namespace-uri-for-prefix("", $x), namespace-uri-for-prefix("a", $x)}</x>   <y>{namespace-uri-for-prefix("", $x/y), namespace-uri-for-prefix("a", $x/y)}</y> </result>
statictyp-xqupd-01,Error: Should throw error XUTY0007.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0007'
statictyp-xqupd-02,Error: Should throw error XUTY0007.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0007'
statictyp-xqupd-03,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
statictyp-xqupd-04,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
statictyp-xqupd-05,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
statictyp-xqupd-06,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
statictyp-xqupd-07,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
statictyp-xqupd-08,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
statictyp-xqupd-09,Error: Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
statictyp-xqupd-10,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-11,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-12,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-13,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-14,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-15,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-16,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-17,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-18,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-19,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-20,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-21,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-22,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-23,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-24,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
statictyp-xqupd-25,Error: Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
statictyp-xqupd-26,Error: Should throw error XUTY0008.: expected 'No selector counterpart for: computedDocumentConstructor.' to equal 'XUTY0008'
statictyp-xqupd-27,Error: Should throw error XUTY0010.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'XUTY0010'
statictyp-xqupd-32,Error: Should throw error XUTY0010.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'XUTY0010'
statictyp-xqupd-36,Error: Should throw error XUTY0010.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'XUTY0010'
statictyp-xqupd-43,Error: Should throw error XUTY0011.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'XUTY0011'
statictyp-xqupd-49,Error: Should throw error XUTY0008.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'XUTY0008'
statictyp-xqupd-50,Error: Should throw error XUTY0008.: expected 'No selector counterpart for: computedDocumentConstructor.' to equal 'XUTY0008'
statictyp-xqupd-51,Error: Should throw error XUTY0012.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'XUTY0012'
statictyp-xqupd-56,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
statictyp-xqupd-57,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
update10keywords,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
revalidation-declaration-01,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-01 :) (: Description: One declare validation specifying strict :)  declare [Error is around here]revalidation strict;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-02,Error: Should throw error XUST0003.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0003'
revalidate-valstrict-del-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-del-002,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valstrict-del-003,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-del-004,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valstrict-ins-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-ins-002,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-ins-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valstrict-ins-004,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-ins-005,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valstrict-ins-006,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-ins-007,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valstrict-ren-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-ren-002,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-ren-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valstrict-repnode-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-repnode-002,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valstrict-repnode-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-valtrans-ins-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-valtrans-ins-002,Error: XPST0003: Unable to parse XPath: "(: Name: valstrict-ins-002 :) (: Description: inserting a permitted element is fine :)  declare construction strip; declare revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR>                  after ($book1copy/AUTHOR)[1]    return $book1copy       ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: valstrict-ins-002 :) (: Description: inserting a permitted element is fine :)  declare construction strip; declare [Error is around here]revalidation strict; import schema default element namespace "http://ns.example.com/books";  (: insert-start :) declare variable $books as document-node(schema-element(BOOKLIST)) external; (: insert-end :)  let $book1 := ($books/BOOKLIST/BOOKS/ITEM)[1] return    copy $book1copy := $book1   modify insert node <AUTHOR xmlns="http://ns.example.com/books">Thursday Next</AUTHOR>                  after ($book1copy/AUTHOR)[1]    return $book1copy
revalidation-declaration-01-fail,Error: Should throw error XUST0026.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0026'
revalidation-declaration-03,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-03 :) (: Description: One declare validation specifying lax :)  declare [Error is around here]revalidation lax;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-04,Error: Should throw error XUST0003.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0003'
revalidate-vallax-del-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-del-002,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-vallax-del-003,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-del-004,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-vallax-ins-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-ins-002,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-ins-003,Error: Should throw error XUST0026.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0026'
revalidate-vallax-ins-004,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-ins-005,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-vallax-ins-006,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-ins-007,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-vallax-ren-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-ren-002,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-ren-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidate-vallax-repnode-001,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-repnode-002,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
revalidate-vallax-repnode-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidation-declaration-03-fail,Error: Should throw error XUST0026.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0026'
revalidation-declaration-05,Error: XPST0003: Unable to parse XPath: "(: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12 ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found. (: Name: revalidation-declaration-05 :) (: Description: One declare validation specifying skip :)  declare [Error is around here]revalidation skip;  (: insert-start :) declare variable $input-context external; (: insert-end :)  12
revalidation-declaration-06,Error: Should throw error XUST0003.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0003'
removeType-valskip-ins-001,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-002,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-004,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-005,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-006,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-007,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-008,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-009,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-010,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-011,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-012,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-013,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ins-014,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-del-001,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-del-002,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-del-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-del-004,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-del-005,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ren-001,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ren-002,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ren-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ren-004,Error: Should throw error XUTY0012.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUTY0012'
removeType-valskip-ren-005,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-ren-006,Error: Should throw error XUDY0024.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUDY0024'
removeType-valskip-repnode-001,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-repnode-002,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-repnode-003,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-repnode-004,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-repnode-005,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
removeType-valskip-repnode-006,SyntaxError: Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.
revalidation-declaration-05-fail,Error: Should throw error XUST0026.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XUST0026'
revalidate-valtrans-ins-003,Error: Should throw error XQDY0027.: expected 'Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "base-uri", "boundary-space", "cast", "castable", "construction", "context", "copy-namespaces", "decimal-format", "default", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "namespace", "ne", "option", "or", "ordering", "to", "treat", "union", "variable", "|", "||", or end of input but "r" found.' to equal 'XQDY0027'
stf-insert-01,Error: Should throw error XUTY0004.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0004'
stf-insert-02,Error: Should throw error XUTY0004.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0004'
stf-insert-into-01,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
stf-insert-into-02,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
stf-insert-into-03,Error: Should throw error XUTY0005.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0005'
stf-insert-into-04,Error: Should throw error XUTY0022.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0022'
stf-insert-after-01,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
stf-insert-after-02,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
stf-insert-after-03,Error: Should throw error XUTY0006.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0006'
stf-delete-01,Error: Should throw error XUTY0007.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0007'
stf-delete-02,Error: Should throw error XUTY0007.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.' to equal 'XUTY0007'
stf-replace-node-01,Error: Should throw error XUTY0008.
stf-replace-node-02,Error: Should throw error XUTY0008.
stf-replace-node-03,Error: Should throw error XUTY0008.
stf-replace-node-04,Error: Should throw error XUTY0010.
stf-replace-node-05,Error: Should throw error XUTY0010.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0010'
stf-replace-node-06,Error: Should throw error XUTY0011.
stf-replace-node-07,Error: Should throw error XUTY0011.: expected 'Not implemented: Intermediate clauses in flwor expressions are not implemented yet' to equal 'XUTY0011'
stf-replace-value-of-node-01,Error: Should throw error XUTY0008.
stf-replace-value-of-node-02,Error: Should throw error XUTY0008.
stf-rename-01,Error: Should throw error XUTY0012.
stf-rename-02,Error: Should throw error XUTY0012.
stf-rename-03,Error: Should throw error XUTY0012.
stf-rename-04,Error: Should throw error XPTY0004.
stf-transform-01,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
stf-transform-02,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
stf-transform-03,Error: Should throw error XUTY0013.: expected 'Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found.' to equal 'XUTY0013'
complex-deletes-q1,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q2,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q6,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q7,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q8,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-deletes-q9,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
complex-replacevalues-q1,Error: XPTY0004 Unable to cast xs:string to type xs:string while calling substring
complex-replacevalues-q7,Error: expected '<root><result count="16"> text-1A\n     text-2A\n       text-3A\n       text-3B\n       text-3C\n       text-3D\n       text-4A\n         text-4B\n             text-5A\n           text-6A\n            </result><result count="13"> text-6B\n           text-5B\n         text-4E\n             text-4G\n         text-4H\n       text-3E\n       text-3F\n      Text in east text-3G\n       text-3H\n     text-2D\n   text-1D\n</result></root>' to equal '<root><result count="10"> text-1A\n     text-2A\n       text-3A\n       text-3B\n       text-3C\n       text-3D\n       text-4A\n         text-4B\n             text-5A\n           text-6A\n            </result><result count="12"> text-6B\n           text-5B\n         text-4E\n             text-4G\n         text-4H\n       text-3E\n       text-3F\n      Text in east text-3G\n       text-3H\n     text-2D\n   text-1D\n</result></root>'
fn-put-003,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-003-fail,Error: Should throw error FOUP0001.: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)"?' to equal 'FOUP0001'
fn-put-004,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-004-fail,Error: Should throw error FOUP0001.: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)"?' to equal 'FOUP0001'
fn-put-005,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-005-fail,Error: Should throw error FOUP0001.: expected 'XPST0017: Function fn:put with arity of 2 not registered. Did you mean "Q{http://www.w3.org/2005/xpath-functions/array}put (array(*)null, xs:integernull, item()*)" or "Q{http://www.w3.org/2005/xpath-functions/map}put (map(*)null, xs:anyAtomicTypenull, item()*)"?' to equal 'FOUP0001'
fn-put-006,Error: A non-updating expression without an expected value is not supported in the test framework.
fn-put-006-fail,Error: Should throw error FOUP0001.: expected 'No selector counterpart for: computedTextConstructor.' to equal 'FOUP0001'
relational-data-q1,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q2,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q3,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q4,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q5-1,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q5-2,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q6-1,SyntaxError: Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.
relational-data-q6-2,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
relational-data-q7,Error: XPST0003: Unable to parse XPath: "(: Test - relational-data-q7 :) (: Description - Update Use Case #7   :)  (: insert-start :) declare variable $items external; (: insert-end :)  (:state-1-start :)  insert nodes   <comment>This is a bargain !</comment> as last into $items/items/item_tuple[itemno=1002]   (:state-1-end :) ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found. (: Test - relational-data-q7 :) (: Description - Update Use Case #7   :)  (: insert-start :) declare variable $items external; (: insert-end :)  (:state-1-start :)  insert [Error is around here]nodes   <comment>This is a bargain !</comment> as last into $items/items/item_tuple[itemno=1002]   (:state-1-end :)
relational-data-q8,Error: XPST0003: Unable to parse XPath: "(: Test - relational-data-q8 :) (: Description - Update Use Case #8   :)  (: insert-start :) declare variable $users external; declare variable $bids external; (: insert-end :)  (:state-1-start :)  let $uid :=  $users/users/user_tuple[name="Annabel Lee"]/userid return    insert nodes     <bid_tuple>        <userid>{data($uid)}</userid>        <itemno>1010</itemno>        <bid>60</bid>        <bid_date>2006-04-23</bid_date>      </bid_tuple>   into $bids/bids    (:state-1-end :)  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found. (: Test - relational-data-q8 :) (: Description - Update Use Case #8   :)  (: insert-start :) declare variable $users external; declare variable $bids external; (: insert-end :)  (:state-1-start :)  let $uid :=  $users/users/user_tuple[name="Annabel Lee"]/userid return    insert [Error is around here]nodes     <bid_tuple>        <userid>{data($uid)}</userid>        <itemno>1010</itemno>        <bid>60</bid>        <bid_date>2006-04-23</bid_date>      </bid_tuple>   into $bids/bids    (:state-1-end :)
relational-data-q9,Error: XPST0003: Unable to parse XPath: "(: Test - relational-data-q9 :) (: Description - Update Use Case #9   :)  (: insert-start :) declare variable $users external; declare variable $bids external; (: insert-end :)  (:state-1-start :)  let $uid :=  $users/users/user_tuple[name="Annabel Lee"]/userid let $topbid :=  max($bids//bid_tuple[itemno=1002]/bid) return    insert nodes      <bid_tuple>        <userid>{data($uid)}</userid>        <itemno>1002</itemno>        <bid>{$topbid - 5.00}</bid>        <bid_date>2006-04-23</bid_date>      </bid_tuple>   into $bids/bids     (:state-1-end :)  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found. (: Test - relational-data-q9 :) (: Description - Update Use Case #9   :)  (: insert-start :) declare variable $users external; declare variable $bids external; (: insert-end :)  (:state-1-start :)  let $uid :=  $users/users/user_tuple[name="Annabel Lee"]/userid let $topbid :=  max($bids//bid_tuple[itemno=1002]/bid) return    insert [Error is around here]nodes      <bid_tuple>        <userid>{data($uid)}</userid>        <itemno>1002</itemno>        <bid>{$topbid - 5.00}</bid>        <bid_date>2006-04-23</bid_date>      </bid_tuple>   into $bids/bids     (:state-1-end :)
address-book-q1,Error: Should throw error XUDY0017.: expected 'Expected " ", "!", "!=", "(", "(:", ")", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\\n", "\\r", "\\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", or "||" but "n" found.' to equal 'XUDY0017'
soap-q1,Error: XPST0003: Unable to parse XPath: "(: Test - soap-q1 :) (: Description - Update Use Case Soap - Processing messages   :)  declare namespace    env="http://www.w3.org/2003/05/soap-envelope"; declare namespace    m="http://travelcompany.example.org/reservation"; declare namespace    n="http://mycompany.example.com/employees"; declare namespace    p="http://travelcompany.example.org/reservation/travel";    (: insert-start :) declare variable $airportsDoc external; declare variable $msg external; (: insert-end :)  declare variable $airports := $airportsDoc/AIRPORTS/AIRPORT;  (:state-1-start :)                                          (:  A clarification is needed only if there are no  :  airports or more than one for a given city. If  :  there is precisely one, there is no need to  :  ask for information on that city.  :)  declare function local:airportChoices($city as xs:string) {   let $airports := $airports[CITY = $city]   return     if (count($airports) = 0)     then         <error> No airports found for {$city}!</error>     else if (count($airports) > 1)      then         <airportChoices>         {            for $c in $airports/CODE           return (string( $c ), " ")         }        </airportChoices>     else () };  (:  Make sure that each airport is unambiguous. If there is  :  more than one airport for a city, ask for clarification.  :  :  The primer only shows the error condition, so it is not  :  clear what to do if there are no errors. Here, we simply  :  return the airports in the itinerary.  :)  declare function local:airports($in as element(env:Envelope)) {     let $departureDeparting :=        $in//p:departure/p:departing     let $departureDepartingAirports :=        $airports[CITY = $departureDeparting]     let $departureArriving :=        $in//p:departure/p:arriving     let $departureArrivingAirports :=        $airports[CITY = $departureArriving]     let $returnDeparting :=        $in//p:return/p:departing     let $returnDepartingAirports :=        $airports[CITY = $returnDeparting]     let $returnArriving :=        $in//p:return/p:arriving     let $returnArrivingAirports :=        $airports[CITY = $returnArriving]     return        if ( count($departureDepartingAirports)=0 or              count($departureDepartingAirports)>1 or              count($departureArrivingAirports)=0 or              count($departureArrivingAirports)>1 or              count($returnDepartingAirports)=0 or              count($returnDepartingAirports)>1 or              count($returnArrivingAirports)=0 or              count($returnArrivingAirports)>1 )          then           <p:itineraryClarification>             <p:departure>               <p:departing>                 { local:airportChoices($departureDeparting) }               </p:departing>               <p:arriving>                 { local:airportChoices($departureArriving) }               </p:arriving>              </p:departure>             <p:return>               <p:departing>                 { local:airportChoices($returnDeparting) }               </p:departing>               <p:arriving>                 { local:airportChoices($returnArriving) }               </p:arriving>             </p:return>           </p:itineraryClarification>          else            <p:itinerary>             <p:departure>               <p:departing>{$departureDeparting}</p:departing>               <p:arriving>{$departureArriving}</p:arriving>             </p:departure>             <p:return>               <p:departing>{$returnDeparting}</p:departing>               <p:arriving>{$returnArriving}</p:arriving>             </p:return>           </p:itinerary> };  copy $out := $msg/env:Envelope   modify (     replace value of node $out//m:dateAndTime         with xs:dateTime("2007-08-16T22:57:20+01:00"),     replace node $out//env:Body      with <env:Body>           { local:airports($out) }          </env:Body>   )   return $out    (:state-1-end :)". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Test - soap-q1 :) (: Description - Update Use Case Soap - Processing messages   :)  declare namespace    env="http://www.w3.org/2003/05/soap-envelope"; declare namespace    m="http://travelcompany.example.org/reservation"; declare namespace    n="http://mycompany.example.com/employees"; declare namespace    p="http://travelcompany.example.org/reservation/travel";    (: insert-start :) declare variable $airportsDoc external; declare variable $msg external; (: insert-end :)  declare variable $airports := $airportsDoc/AIRPORTS/AIRPORT;  (:state-1-start :)                                          (:  A clarification is needed only if there are no  :  airports or more than one for a given city. If  :  there is precisely one, there is no need to  :  ask for information on that city.  :)  declare function local:airportChoices($city as xs:string) {   let $airports := $airports[CITY = $city]   return     if (count($airports) = 0)     then         <error> No airports found for {$city}!</error>     else if (count($airports) > 1)      then         <airportChoices>         {            for $c in $airports/CODE           return (string( $c ), " ")         }        </airportChoices>     else () };  (:  Make sure that each airport is unambiguous. If there is  :  more than one airport for a city, ask for clarification.  :  :  The primer only shows the error condition, so it is not  :  clear what to do if there are no errors. Here, we simply  :  return the airports in the itinerary.  :)  declare function local:airports($in as element(env:Envelope)) {     let $departureDeparting :=        $in//p:departure/p:departing     let $departureDepartingAirports :=        $airports[CITY = $departureDeparting]     let $departureArriving :=        $in//p:departure/p:arriving     let $departureArrivingAirports :=        $airports[CITY = $departureArriving]     let $returnDeparting :=        $in//p:return/p:departing     let $returnDepartingAirports :=        $airports[CITY = $returnDeparting]     let $returnArriving :=        $in//p:return/p:arriving     let $returnArrivingAirports :=        $airports[CITY = $returnArriving]     return        if ( count($departureDepartingAirports)=0 or              count($departureDepartingAirports)>1 or              count($departureArrivingAirports)=0 or              count($departureArrivingAirports)>1 or              count($returnDepartingAirports)=0 or              count($returnDepartingAirports)>1 or              count($returnArrivingAirports)=0 or              count($returnArrivingAirports)>1 )          then           <p:itineraryClarification>             <p:departure>               <p:departing>                 { local:airportChoices($departureDeparting) }               </p:departing>               <p:arriving>                 { local:airportChoices($departureArriving) }               </p:arriving>              </p:departure>             <p:return>               <p:departing>                 { local:airportChoices($returnDeparting) }               </p:departing>               <p:arriving>                 { local:airportChoices($returnArriving) }               </p:arriving>             </p:return>           </p:itineraryClarification>          else            <p:itinerary>             <p:departure>               <p:departing>{$departureDeparting}</p:departing>               <p:arriving>{$departureArriving}</p:arriving>             </p:departure>             <p:return>               <p:departing>{$returnDeparting}</p:departing>               <p:arriving>{$returnArriving}</p:arriving>             </p:return>           </p:itinerary> };  copy [Error is around here]$out := $msg/env:Envelope   modify (     replace value of node $out//m:dateAndTime         with xs:dateTime("2007-08-16T22:57:20+01:00"),     replace node $out//env:Body      with <env:Body>           { local:airports($out) }          </env:Body>   )   return $out    (:state-1-end :)
namespaces-q1,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
parts-q1,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
parts-q2,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
parts-q3-1,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
parts-q3-2,Error: XPST0003: Unable to parse XPath: "(: Test - parts-q3-2 :) (: Description - Update Use Case Parts Q3 - Alternate Solution:)  (: insert-start :) declare variable $part-tree external; declare variable $part-list external; (: insert-end :)  (:state-1-start :)  declare updating function               local:delete-subtree($p as element(part))   {       for $child in $part-list//part       where $p/@partid eq $child/@partof       return (         local:delete-subtree($child),         delete node $child       )   };  for $p in $part-list//part[@name="car"] return    local:delete-subtree($p)    (:state-1-end :)  ". Expected " ", "!", "!=", "%", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "context", "div", "eq", "except", "function", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "option", "or", "to", "treat", "union", "variable", "|", "||", or end of input but "u" found. (: Test - parts-q3-2 :) (: Description - Update Use Case Parts Q3 - Alternate Solution:)  (: insert-start :) declare variable $part-tree external; declare variable $part-list external; (: insert-end :)  (:state-1-start :)  declare [Error is around here]updating function               local:delete-subtree($p as element(part))   {       for $child in $part-list//part       where $p/@partid eq $child/@partof       return (         local:delete-subtree($child),         delete node $child       )   };  for $p in $part-list//part[@name="car"] return    local:delete-subtree($p)    (:state-1-end :)
parts-q4-1,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
parts-q4-2,SyntaxError: Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "n" found.
parts-q6,Error: Not implemented: Intermediate clauses in flwor expressions are not implemented yet
nil-q1,Error: XPST0003: Unable to parse XPath: "(: Test - nil-q1 :) (: Description - Update Use Case nill Q1:)  (: insert-start :) declare variable $employees external; (: insert-end :)  (:state-1-start :)  for $e in $employees//employee where $e/@mgr = true() return      copy $emp := $e       modify (           replace value of node $emp/salary with "" ,           insert node (attribute xsi:nil {"true"})               into $emp/salary           )       return $emp        (:state-1-end :)  ". Expected " ", "!", "!=", "(", "(:", "*", "+", ",", "-", "/", "//", "<", "<<", "<=", "=", "=>", ">", ">=", ">>", "[", "\n", "\r", "\t", "and", "cast", "castable", "div", "eq", "except", "ge", "gt", "idiv", "instance", "intersect", "is", "le", "lt", "mod", "ne", "or", "to", "treat", "union", "|", "||", or end of input but "$" found. (: Test - nil-q1 :) (: Description - Update Use Case nill Q1:)  (: insert-start :) declare variable $employees external; (: insert-end :)  (:state-1-start :)  for $e in $employees//employee where $e/@mgr = true() return      copy [Error is around here]$emp := $e       modify (           replace value of node $emp/salary with "" ,           insert node (attribute xsi:nil {"true"})               into $emp/salary           )       return $emp        (:state-1-end :)